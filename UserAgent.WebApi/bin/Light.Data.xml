<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Light.Data</name>
    </assembly>
    <members>
        <member name="F:Light.Data.CommandFactory._database">
            <summary>
            数据库对象
            </summary>
        </member>
        <member name="F:Light.Data.CommandFactory._canInnerPage">
            <summary>
            是否支持内分页
            </summary>
        </member>
        <member name="M:Light.Data.CommandFactory.BuildCommand(System.String,Light.Data.DataParameter[])">
            <summary>
            生成SQL命令
            </summary>
            <param name="sql">SQL语句</param>
            <param name="dataParameters">参数数组</param>
            <returns>SQL命令</returns>
        </member>
        <member name="M:Light.Data.CommandFactory.#ctor(Light.Data.Database)">
            <summary>
            构造函数
            </summary>
            <param name="database">数据库对象</param>
        </member>
        <member name="M:Light.Data.CommandFactory.GetDataParameters(System.Collections.Generic.IEnumerable{Light.Data.Mappings.FieldMapping},System.Object)">
            <summary>
            从字段映射中获取DataParameter集合
            </summary>
            <param name="mappings">字段映射列表</param>
            <param name="source">数据对象</param>
            <returns>DataParameter集合</returns>
        </member>
        <member name="M:Light.Data.CommandFactory.CreateInsertCommand(System.Object)">
            <summary>
            生成数据新增命令
            </summary>
            <param name="entity">数据实体</param>
            <returns>新增命令对象</returns>
        </member>
        <member name="M:Light.Data.CommandFactory.CreateUpdateCommand(System.Object,System.String[])">
            <summary>
            生成数据更新命令
            </summary>
            <param name="entity">数据实体</param>
            <param name="updatefieldNames">需更新的数据字段</param>
            <returns>更新命令对象</returns>
        </member>
        <member name="M:Light.Data.CommandFactory.CreateDeleteCommand(System.Object)">
            <summary>
            生成数据删除命令
            </summary>
            <param name="entity">数据实体</param>
            <returns>删除命令对象</returns>
        </member>
        <member name="M:Light.Data.CommandFactory.CreateSelectCommand(Light.Data.Mappings.DataEntityMapping,Light.Data.QueryExpression,Light.Data.OrderExpression,Light.Data.Region)">
            <summary>
            创建查询命令
            </summary>
            <param name="mapping">数据表映射</param>
            <param name="query">查询表达式</param>
            <param name="order">排序表达式</param>
            <param name="region">查询范围,如非空则生成内分页语句</param>
            <returns>查询命令对象</returns>
        </member>
        <member name="M:Light.Data.CommandFactory.CreateSelectBaseCommand(Light.Data.Mappings.DataEntityMapping,System.String,Light.Data.QueryExpression,Light.Data.OrderExpression,Light.Data.Region)">
            <summary>
            创建自定查询内容的命令
            </summary>
            <param name="mapping">数据表映射</param>
            <param name="customSelect">查询输出的内容</param>
            <param name="query">查询表达式</param>
            <param name="order">排序表达式</param>
            <param name="region">查询范围</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.CommandFactory.CreateExistsCommand(Light.Data.Mappings.DataEntityMapping,Light.Data.QueryExpression)">
            <summary>
            创建内容Exists查询命令
            </summary>
            <param name="mapping">数据表映射</param>
            <param name="query">查询表达式</param>
            <returns></returns>
        </member>
        <member name="P:Light.Data.CommandFactory.CanInnerPager">
            <summary>
            是否支持内分页
            </summary>
        </member>
        <member name="M:Light.Data.AccessCommandFactory.CreateExistsCommand(Light.Data.Mappings.DataEntityMapping,Light.Data.QueryExpression)">
            <summary>
            创建内容Exists查询命令
            </summary>
            <param name="mapping">数据表映射</param>
            <param name="query">查询表达式</param>
            <returns></returns>
        </member>
        <member name="T:Light.Data.DataTableAttribute">
            <summary>
            数据表属性
            </summary>
        </member>
        <member name="P:Light.Data.Config.IDataTableConfig.TableName">
            <summary>
            数据表名
            </summary>
        </member>
        <member name="P:Light.Data.Config.IDataTableConfig.ExtendParams">
            <summary>
            扩展参数
            </summary>
        </member>
        <member name="P:Light.Data.Config.IDataTableConfig.IsEntityTable">
            <summary>
            是否有实体表对应关系
            </summary>
        </member>
        <member name="M:Light.Data.DataTableAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="tableName">表名称</param>
        </member>
        <member name="M:Light.Data.DataTableAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Light.Data.DataTableAttribute.TableName">
            <summary>
            数据表名
            </summary>
        </member>
        <member name="P:Light.Data.DataTableAttribute.ExtendParams">
            <summary>
            扩展参数
            </summary>
        </member>
        <member name="P:Light.Data.DataTableAttribute.IsEntityTable">
            <summary>
            是否有实体表对应关系
            </summary>
        </member>
        <member name="T:Light.Data.Config.AggregateFieldConfig">
            <summary>
            统计字段属性
            </summary>
        </member>
        <member name="P:Light.Data.Config.IAggregateFieldConfig.Name">
            <summary>
            查询别名
            </summary>
        </member>
        <member name="P:Light.Data.Config.IConfiguratorFieldConfig.FieldName">
            <summary>
            配置字段名
            </summary>
        </member>
        <member name="M:Light.Data.Config.AggregateFieldConfig.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="fieldName">字段名称</param>
        </member>
        <member name="P:Light.Data.Config.AggregateFieldConfig.Name">
            <summary>
            查询别名
            </summary>
        </member>
        <member name="P:Light.Data.Config.IAggregateTableConfig.RelateType">
            <summary>
            关联表类型
            </summary>
        </member>
        <member name="P:Light.Data.Config.IAggregateTableConfig.ExtendParams">
            <summary>
            扩展参数
            </summary>
        </member>
        <member name="M:Light.Data.Config.AggregateTableConfig.#ctor(System.Type,System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="dataType">数据类型</param>
            <param name="relateType">关联类型</param>
        </member>
        <member name="P:Light.Data.Config.AggregateTableConfig.DataType">
            <summary>
            数据表名
            </summary>
        </member>
        <member name="P:Light.Data.Config.AggregateTableConfig.RelateType">
            <summary>
            关联表类型
            </summary>
        </member>
        <member name="P:Light.Data.Config.AggregateTableConfig.ExtendParams">
            <summary>
            扩展参数
            </summary>
        </member>
        <member name="P:Light.Data.Config.IDataFieldConfig.Name">
            <summary>
            数据库列名
            </summary>
        </member>
        <member name="P:Light.Data.Config.IDataFieldConfig.IsNullable">
            <summary>
            是否可空
            </summary>
        </member>
        <member name="P:Light.Data.Config.IDataFieldConfig.IsPrimaryKey">
            <summary>
            是否主键
            </summary>
        </member>
        <member name="P:Light.Data.Config.IDataFieldConfig.IsIdentity">
            <summary>
            是否自增ID
            </summary>
        </member>
        <member name="P:Light.Data.Config.IDataFieldConfig.DBType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="P:Light.Data.Config.IDataFieldConfig.DefaultValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="P:Light.Data.Config.DataFieldConfig.FieldName">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="P:Light.Data.Config.DataFieldConfig.Name">
            <summary>
            数据库列名
            </summary>
        </member>
        <member name="P:Light.Data.Config.DataFieldConfig.IsNullable">
            <summary>
            是否可空
            </summary>
        </member>
        <member name="P:Light.Data.Config.DataFieldConfig.IsPrimaryKey">
            <summary>
            是否主键
            </summary>
        </member>
        <member name="P:Light.Data.Config.DataFieldConfig.IsIdentity">
            <summary>
            是否自增ID
            </summary>
        </member>
        <member name="P:Light.Data.Config.DataFieldConfig.DBType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="P:Light.Data.Config.DataFieldConfig.DefaultValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="P:Light.Data.Config.DataFieldConfig.DataOrder">
            <summary>
            数据顺序
            </summary>
        </member>
        <member name="M:Light.Data.Config.DataTableConfig.#ctor(System.Type)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Light.Data.Config.DataTableConfig.DataType">
            <summary>
            数据表名
            </summary>
        </member>
        <member name="P:Light.Data.Config.DataTableConfig.TableName">
            <summary>
            数据表名
            </summary>
        </member>
        <member name="P:Light.Data.Config.DataTableConfig.ExtendParams">
            <summary>
            扩展参数
            </summary>
        </member>
        <member name="P:Light.Data.Config.DataTableConfig.IsEntityTable">
            <summary>
            是否有实体表对应关系
            </summary>
        </member>
        <member name="P:Light.Data.Config.IRelationFieldConfig.PropertyName">
            <summary>
             关联数据表对应字段名
            </summary>
        </member>
        <member name="T:Light.Data.Config.LightDataConfigurationSectionHandler">
            <summary>
            配置节点处理类
            </summary>
        </member>
        <member name="M:Light.Data.Config.LightDataConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates a configuration section handler.
            </summary>
            <param name="parent">Parent object.</param>
            <param name="configContext">Configuration context object.</param>
            <param name="section">Section XML node.</param>
            <returns>The created section handler object.</returns>
        </member>
        <member name="T:Light.Data.Config.XmlConfiguratorAttribute">
            <summary>
            XML配置特性
            </summary>
        </member>
        <member name="M:Light.Data.Config.XmlConfiguratorAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="configPath">配置文件路径</param>
        </member>
        <member name="P:Light.Data.Config.XmlConfiguratorAttribute.ConfigPath">
            <summary>
            配置文件路径
            </summary>
        </member>
        <member name="T:Light.Data.ExtendDataFieldInfo">
            <summary>
            扩展字段信息基类,使用数据库自带函数扩展
            </summary>
        </member>
        <member name="T:Light.Data.DataFieldInfo">
            <summary>
            字段信息,用户生成查询或排序表达式
            </summary>
        </member>
        <member name="T:Light.Data.BasicFieldInfo">
            <summary>
            基本字段信息
            </summary>
        </member>
        <member name="P:Light.Data.BasicFieldInfo.FieldName">
            <summary>
            获取字段名称
            </summary>
        </member>
        <member name="M:Light.Data.DataFieldInfo.Eq(System.Object)">
            <summary>
            等于
            </summary>
            <param name="value">数值</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.LtEq(System.Object)">
            <summary>
            少于等于
            </summary>
            <param name="value">数值</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.Lt(System.Object)">
            <summary>
            少于
            </summary>
            <param name="value">数值</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.Gt(System.Object)">
            <summary>
            大于
            </summary>
            <param name="value">数值</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.GtEq(System.Object)">
            <summary>
            大于等于
            </summary>
            <param name="value">数值</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.NotEq(System.Object)">
            <summary>
            不等于
            </summary>
            <param name="value">数值</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.In(System.Collections.IEnumerable)">
            <summary>
            In查询
            </summary>
            <param name="values">数据枚举集</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.NotIn(System.Collections.IEnumerable)">
            <summary>
            In查询
            </summary>
            <param name="values">数据枚举集</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.In(Light.Data.DataFieldInfo,Light.Data.QueryExpression)">
            <summary>
            In子查询
            </summary>
            <param name="field">子查询字段</param>
            <param name="expression">子查询表达式</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.In(Light.Data.DataFieldInfo)">
            <summary>
            In子查询
            </summary>
            <param name="field">子查询字段</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.NotIn(Light.Data.DataFieldInfo,Light.Data.QueryExpression)">
            <summary>
            Not In子查询
            </summary>
            <param name="field">子查询字段</param>
            <param name="expression">子查询表达式</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.NotIn(Light.Data.DataFieldInfo)">
            <summary>
            Not In子查询
            </summary>
            <param name="field">子查询字段</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.GtAll(Light.Data.DataFieldInfo,Light.Data.QueryExpression)">
            <summary>
            大于All子查询
            </summary>
            <param name="field">子查询字段</param>
            <param name="expression">子查询表达式</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.GtAll(Light.Data.DataFieldInfo)">
            <summary>
            大于All子查询
            </summary>
            <param name="field">子查询字段</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.GtAll(System.Collections.IEnumerable)">
            <summary>
            大于All子查询
            </summary>
            <param name="values">数据枚举集</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.LtAll(Light.Data.DataFieldInfo,Light.Data.QueryExpression)">
            <summary>
            小于All子查询
            </summary>
            <param name="field">子查询字段</param>
            <param name="expression">子查询表达式</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.LtAll(Light.Data.DataFieldInfo)">
            <summary>
            小于All子查询
            </summary>
            <param name="field">子查询字段</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.LtAll(System.Collections.IEnumerable)">
            <summary>
            小于All子查询
            </summary>
            <param name="values">数据枚举集</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.GtAny(Light.Data.DataFieldInfo,Light.Data.QueryExpression)">
            <summary>
            大于Any子查询
            </summary>
            <param name="field">子查询字段</param>
            <param name="expression">子查询表达式</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.GtAny(Light.Data.DataFieldInfo)">
            <summary>
            大于All子查询
            </summary>
            <param name="field">子查询字段</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.GtAny(System.Collections.IEnumerable)">
            <summary>
            大于Any子查询
            </summary>
            <param name="values">数据枚举集</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.LtAny(Light.Data.DataFieldInfo,Light.Data.QueryExpression)">
            <summary>
            小于Any子查询
            </summary>
            <param name="field">子查询字段</param>
            <param name="expression">子查询表达式</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.LtAny(Light.Data.DataFieldInfo)">
            <summary>
            小于All子查询
            </summary>
            <param name="field">子查询字段</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.LtAny(System.Collections.IEnumerable)">
            <summary>
            小于Any子查询
            </summary>
            <param name="values">数据枚举集</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.Between(System.Object,System.Object)">
            <summary>
            Between查询
            </summary>
            <param name="fromvalue">开始值</param>
            <param name="tovalue">结束值</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.NotBetween(System.Object,System.Object)">
            <summary>
            Not Between查询
            </summary>
            <param name="fromvalue">开始值</param>
            <param name="tovalue">结束值</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.Like(System.Object)">
            <summary>
            like匹配
            </summary>
            <param name="value">匹配值</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.NotLike(System.Object)">
            <summary>
            not like匹配
            </summary>
            <param name="value">匹配值</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.Match(System.Object)">
            <summary>
            模糊匹配
            </summary>
            <param name="value">匹配值</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.NotMatch(System.Object)">
            <summary>
            not like 模糊匹配
            </summary>
            <param name="value">匹配值</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.IsNull">
            <summary>
            查询字段是否空值
            </summary>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.IsNotNull">
            <summary>
            查询字段是否非空值
            </summary>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.IsTrue">
            <summary>
            查询字段是否True
            </summary>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.IsFalse">
            <summary>
            查询字段是否False
            </summary>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.OrderByAsc">
            <summary>
            字段顺序排序
            </summary>
            <returns>排序表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.OrderByDesc">
            <summary>
            字段倒序排序
            </summary>
            <returns>排序表达式</returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.op_Equality(Light.Data.DataFieldInfo,System.Object)">
            <summary>
            等于
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.op_Inequality(Light.Data.DataFieldInfo,System.Object)">
            <summary>
            不等于
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.op_GreaterThan(Light.Data.DataFieldInfo,System.Object)">
            <summary>
            大于
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.op_GreaterThanOrEqual(Light.Data.DataFieldInfo,System.Object)">
            <summary>
            大于等于
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.op_LessThan(Light.Data.DataFieldInfo,System.Object)">
            <summary>
            小于
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.op_LessThanOrEqual(Light.Data.DataFieldInfo,System.Object)">
            <summary>
            小于等于
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.TransformMatch(System.Boolean,System.Boolean)">
            <summary>
            可在字段的左右两边添加匹配字符
            </summary>
            <param name="left">左匹配</param>
            <param name="right">右匹配</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.TransformDate">
            <summary>
            获取时间类型字段的日期,返回时间类型数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.TransformDateString">
            <summary>
            获取时间类型字段的日期,按Y-M-D格式返回字符串类型的日期
            </summary>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.TransformDateString(System.String)">
            <summary>
            获取时间类型字段的日期,按format格式返回字符串类型的日期
            </summary>
            <param name="format">日期格式 Y年M月D日 目前支持格式 YMD|YM|Y-M-D|Y-M|D-M-Y|M-D-Y|Y/M/D|Y/M|D/M/Y|M/D/Y</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.TransformYear">
            <summary>
            获取时间类型字段的年份
            </summary>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.TransformMonth">
            <summary>
            获取时间类型字段的月份
            </summary>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.TransformDay">
            <summary>
            获取时间类型字段的当月日数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.TransformHour">
            <summary>
            获取时间类型字段的小时数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.TransformMinute">
            <summary>
            获取时间类型字段的分钟数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.TransformSecond">
            <summary>
            获取时间类型字段的秒数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.TransformWeek">
            <summary>
            获取时间类型字段的当年周数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.TransformWeekDay">
            <summary>
            获取时间类型字段的星期索引,不同数据库有不同的定义
            </summary>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.TransformLength">
            <summary>
            获取字符串类型字段的长度
            </summary>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.TransformSubString(System.Int32,System.Int32)">
            <summary>
            获取字符串类型字段的指定位置数据
            </summary>
            <param name="start">开始索引</param>
            <param name="size">长度</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.TransformSubString(System.Int32)">
            <summary>
            获取字符串类型字段的指定位置数据
            </summary>
            <param name="start">开始索引</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.op_Addition(Light.Data.DataFieldInfo,System.Int32)">
            <summary>
            加
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.op_Subtraction(Light.Data.DataFieldInfo,System.Int32)">
            <summary>
            减
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.op_Multiply(Light.Data.DataFieldInfo,System.Int32)">
            <summary>
            乘
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.op_Division(Light.Data.DataFieldInfo,System.Int32)">
            <summary>
            除
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.op_Modulus(Light.Data.DataFieldInfo,System.Int32)">
            <summary>
            余
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.op_ExclusiveOr(Light.Data.DataFieldInfo,System.Int32)">
            <summary>
            幂
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.op_Addition(Light.Data.DataFieldInfo,System.Decimal)">
            <summary>
            加
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.op_Subtraction(Light.Data.DataFieldInfo,System.Decimal)">
            <summary>
            减
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.op_Multiply(Light.Data.DataFieldInfo,System.Decimal)">
            <summary>
            乘
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.op_Division(Light.Data.DataFieldInfo,System.Decimal)">
            <summary>
            除
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.op_Modulus(Light.Data.DataFieldInfo,System.Decimal)">
            <summary>
            余
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.op_ExclusiveOr(Light.Data.DataFieldInfo,System.Decimal)">
            <summary>
            幂
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.TransformAbs">
            <summary>
            获取字段的绝对值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.TransformLog">
            <summary>
            获取字段的e为底的对数值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.TransformExp">
            <summary>
            获取字段的e 的给定次幂
            </summary>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.TransformSin">
            <summary>
            获取字段的正弦值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.TransformCos">
            <summary>
            获取字段的余弦值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.TransformTan">
            <summary>
            获取字段的正切值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.TransformAtan">
            <summary>
            获取字段的反正切值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.Equals(Light.Data.DataFieldInfo)">
            <summary>
            匹配对象是否相等
            </summary>
            <param name="target">匹配对象</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.EqualsDetail(Light.Data.DataFieldInfo)">
            <summary>
            匹配细节内容是否相等
            </summary>
            <param name="info">匹配对象</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.Equals(System.Object)">
            <summary>
            匹配对象是否相等
            </summary>
            <param name="obj">匹配对象</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataFieldInfo.GetHashCode">
            <summary>
            获取哈希码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Light.Data.ExtendDataFieldInfo.EqualsDetail(Light.Data.DataFieldInfo)">
            <summary>
            匹配细节内容是否相等
            </summary>
            <param name="info">匹配对象</param>
            <returns></returns>
        </member>
        <member name="P:Light.Data.ExtendDataFieldInfo.BaseFieldInfo">
            <summary>
            原始字段信息
            </summary>
        </member>
        <member name="M:Light.Data.MssqlCommandFactory_2000.CreateExistsCommand(Light.Data.Mappings.DataEntityMapping,Light.Data.QueryExpression)">
            <summary>
            创建内容Exists查询命令
            </summary>
            <param name="mapping">数据表映射</param>
            <param name="query">查询表达式</param>
            <returns></returns>
        </member>
        <member name="T:Light.Data.DataTableAlias">
            <summary>
            数据表别名
            </summary>
        </member>
        <member name="M:Light.Data.DataTableAlias.Set``1(System.String)">
            <summary>
            设置数据类型的别名
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="tableName">别名</param>
        </member>
        <member name="M:Light.Data.DataTableAlias.Unset``1">
            <summary>
            取消数据类型的别名
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Light.Data.DataTableAlias.Dispose">
            <summary>
            对象注销
            </summary>
        </member>
        <member name="M:Light.Data.DataTableAlias.Dispose(System.Boolean)">
            <summary>
            protected的Dispose方法，保证不会被外部调用。
            </summary>
            <param name="disposing">传入bool值disposing以确定是否释放托管资源</param>
        </member>
        <member name="M:Light.Data.DataTableAlias.Finalize">
            <summary>
            供GC调用的析构函数
            </summary>
        </member>
        <member name="T:Light.Data.DataField.DateDataFieldInfo">
            <summary>
            日期格式数据字段
            </summary>
        </member>
        <member name="T:Light.Data.DataField.MatchDataFieldInfo">
            <summary>
            模糊匹配字段
            </summary>
        </member>
        <member name="M:Light.Data.DataField.MatchDataFieldInfo.EqualsDetail(Light.Data.DataFieldInfo)">
            <summary>
            匹配细节内容是否相等
            </summary>
            <param name="info">匹配对象</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataField.MatchDataFieldInfo.ReverseLike(System.Object)">
            <summary>
            like匹配(倒转)
            </summary>
            <param name="value">匹配值</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.DataField.MatchDataFieldInfo.ReverseNotLike(System.Object)">
            <summary>
            not like匹配(倒转)
            </summary>
            <param name="value">匹配值</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.Handler.TypeHelper.IsParentType(System.Type,System.Type)">
            <summary>
            判断target类型是否继承于parent类型
            </summary>
            <param name="target">目标类型</param>
            <param name="parent">父类型</param>
            <returns>是否</returns>
        </member>
        <member name="T:Light.Data.AggregateHavingExpression">
            <summary>
            统计后查询表达式
            </summary>
        </member>
        <member name="T:Light.Data.Expression">
            <summary>
            基类表达式
            </summary>
        </member>
        <member name="P:Light.Data.Expression.IgnoreConsistency">
            <summary>
            是否检查表达式与查询表的一致性
            </summary>
        </member>
        <member name="M:Light.Data.AggregateHavingExpression.op_BitwiseAnd(Light.Data.AggregateHavingExpression,Light.Data.AggregateHavingExpression)">
            <summary>
            And结合
            </summary>
            <param name="expression1">表达式1</param>
            <param name="expression2">表达式2</param>
            <returns>新表达式</returns>
        </member>
        <member name="M:Light.Data.AggregateHavingExpression.op_BitwiseOr(Light.Data.AggregateHavingExpression,Light.Data.AggregateHavingExpression)">
            <summary>
            Or结合
            </summary>
            <param name="expression1">表达式1</param>
            <param name="expression2">表达式2</param>
            <returns>新表达式</returns>
        </member>
        <member name="M:Light.Data.AggregateHavingExpression.Equals(Light.Data.AggregateHavingExpression)">
            <summary>
            匹配内容是否相等
            </summary>
            <param name="target">匹配对象</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.AggregateHavingExpression.EqualsDetail(Light.Data.AggregateHavingExpression)">
            <summary>
            匹配内容细节是否相等
            </summary>
            <param name="expression">匹配对象</param>
            <returns></returns>
        </member>
        <member name="T:Light.Data.OrderExpression">
            <summary>
            排序表达式
            </summary>
        </member>
        <member name="M:Light.Data.OrderExpression.op_BitwiseAnd(Light.Data.OrderExpression,Light.Data.OrderExpression)">
            <summary>
            排序连接
            </summary>
            <param name="expression1"></param>
            <param name="expression2"></param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.OrderExpression.Random">
            <summary>
            随机排序
            </summary>
            <returns></returns>
        </member>
        <member name="M:Light.Data.OrderExpression.Equals(Light.Data.OrderExpression)">
            <summary>
            匹配对象是否相等
            </summary>
            <param name="target">匹配对象</param>
            <returns></returns>
        </member>
        <member name="T:Light.Data.QueryExpression">
            <summary>
            查询表达式
            </summary>
        </member>
        <member name="M:Light.Data.QueryExpression.op_BitwiseAnd(Light.Data.QueryExpression,Light.Data.QueryExpression)">
            <summary>
            与连接
            </summary>
            <param name="expression1"></param>
            <param name="expression2"></param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.QueryExpression.op_BitwiseOr(Light.Data.QueryExpression,Light.Data.QueryExpression)">
            <summary>
            或连接
            </summary>
            <param name="expression1"></param>
            <param name="expression2"></param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.QueryExpression.Exists(Light.Data.QueryExpression)">
            <summary>
            Exists语法
            </summary>
            <param name="expression">内查询表达式</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.QueryExpression.NotExists(Light.Data.QueryExpression)">
            <summary>
            Not Exists语法
            </summary>
            <param name="expression">内查询表达式</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.QueryExpression.Equals(Light.Data.QueryExpression)">
            <summary>
            匹配内容是否相等
            </summary>
            <param name="target">匹配对象</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.QueryExpression.EqualsDetail(Light.Data.QueryExpression)">
            <summary>
            匹配对象细节是否相等
            </summary>
            <param name="expression">匹配对象</param>
            <returns></returns>
        </member>
        <member name="T:Light.Data.AggregateFunction">
            <summary>
            聚合函数
            </summary>
        </member>
        <member name="M:Light.Data.AggregateFunction.Eq(System.Object)">
            <summary>
            等于
            </summary>
            <param name="value">数值</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.LtEq(System.Object)">
            <summary>
            少于等于
            </summary>
            <param name="value">数值</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.Lt(System.Object)">
            <summary>
            少于
            </summary>
            <param name="value">数值</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.Gt(System.Object)">
            <summary>
            大于
            </summary>
            <param name="value">数值</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.GtEq(System.Object)">
            <summary>
            大于等于
            </summary>
            <param name="value">数值</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.NotEq(System.Object)">
            <summary>
            不等于
            </summary>
            <param name="value">数值</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.In(System.Collections.IEnumerable)">
            <summary>
            In查询
            </summary>
            <param name="values">数据枚举集</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.NotIn(System.Collections.IEnumerable)">
            <summary>
            In查询
            </summary>
            <param name="values">数据枚举集</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.In(Light.Data.DataFieldInfo,Light.Data.QueryExpression)">
            <summary>
            In子查询
            </summary>
            <param name="field">子查询字段</param>
            <param name="expression">子查询表达式</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.In(Light.Data.DataFieldInfo)">
            <summary>
            In子查询
            </summary>
            <param name="field">子查询字段</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.NotIn(Light.Data.DataFieldInfo,Light.Data.QueryExpression)">
            <summary>
            Not In子查询
            </summary>
            <param name="field">子查询字段</param>
            <param name="expression">子查询表达式</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.NotIn(Light.Data.DataFieldInfo)">
            <summary>
            Not In子查询
            </summary>
            <param name="field">子查询字段</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.GtAll(Light.Data.DataFieldInfo,Light.Data.QueryExpression)">
            <summary>
            大于All子查询
            </summary>
            <param name="field">子查询字段</param>
            <param name="expression">子查询表达式</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.GtAll(Light.Data.DataFieldInfo)">
            <summary>
            大于All子查询
            </summary>
            <param name="field">子查询字段</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.LtAll(Light.Data.DataFieldInfo,Light.Data.QueryExpression)">
            <summary>
            小于All子查询
            </summary>
            <param name="field">子查询字段</param>
            <param name="expression">子查询表达式</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.LtAll(Light.Data.DataFieldInfo)">
            <summary>
            小于All子查询
            </summary>
            <param name="field">子查询字段</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.GtAny(Light.Data.DataFieldInfo,Light.Data.QueryExpression)">
            <summary>
            大于Any子查询
            </summary>
            <param name="field">子查询字段</param>
            <param name="expression">子查询表达式</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.GtAny(Light.Data.DataFieldInfo)">
            <summary>
            大于All子查询
            </summary>
            <param name="field">子查询字段</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.LtAny(Light.Data.DataFieldInfo,Light.Data.QueryExpression)">
            <summary>
            小于Any子查询
            </summary>
            <param name="field">子查询字段</param>
            <param name="expression">子查询表达式</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.LtAny(Light.Data.DataFieldInfo)">
            <summary>
            小于All子查询
            </summary>
            <param name="field">子查询字段</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.Between(System.Object,System.Object)">
            <summary>
            Between查询
            </summary>
            <param name="fromvalue">开始值</param>
            <param name="tovalue">结束值</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.NotBetween(System.Object,System.Object)">
            <summary>
            Not Between查询
            </summary>
            <param name="fromvalue">开始值</param>
            <param name="tovalue">结束值</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.IsNull">
            <summary>
            查询字段是否空值
            </summary>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.IsNotNull">
            <summary>
            查询字段是否非空值
            </summary>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.op_Equality(Light.Data.AggregateFunction,System.Object)">
            <summary>
            等于
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.op_Inequality(Light.Data.AggregateFunction,System.Object)">
            <summary>
            不等于
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.op_GreaterThan(Light.Data.AggregateFunction,System.Object)">
            <summary>
            大于
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.op_GreaterThanOrEqual(Light.Data.AggregateFunction,System.Object)">
            <summary>
            大于等于
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.op_LessThan(Light.Data.AggregateFunction,System.Object)">
            <summary>
            小于
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.op_LessThanOrEqual(Light.Data.AggregateFunction,System.Object)">
            <summary>
            小于等于
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.OrderByAsc">
            <summary>
            字段顺序排序
            </summary>
            <returns>排序表达式</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.OrderByDesc">
            <summary>
            字段倒序排序
            </summary>
            <returns>排序表达式</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.Count">
            <summary>
            生成计数函数,Count所有数据
            </summary>
            <returns>函数对象</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.Count(Light.Data.QueryExpression)">
            <summary>
            条件计数语句
            </summary>
            <param name="expression">条件表达式</param>
            <returns>函数对象</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.Count(Light.Data.QueryExpression,Light.Data.DataFieldInfo,System.Boolean)">
            <summary>
            条件计数语句
            </summary>
            <param name="expression">条件表达式</param>
            <param name="fieldInfo">统计字段</param>
            <param name="isDistinct">是否去重复</param>
            <returns>函数对象</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.Count(Light.Data.DataFieldInfo)">
            <summary>
            对字段计算统计
            </summary>
            <param name="fieldInfo">统计字段</param>
            <returns>函数对象</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.Count(Light.Data.DataFieldInfo,System.Boolean)">
            <summary>
             对字段计算统计
            </summary>
            <param name="fieldInfo">统计字段</param>
            <param name="isDistinct">是否去重复</param>
            <returns>函数对象</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.Sum(Light.Data.DataFieldInfo)">
            <summary>
            对字段总和统计
            </summary>
            <param name="fieldInfo">统计字段</param>
            <returns>函数对象</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.Sum(Light.Data.DataFieldInfo,System.Boolean)">
            <summary>
            对字段总和统计
            </summary>
            <param name="fieldInfo">统计字段</param>
            <param name="isDistinct">是否去重复</param>
            <returns>函数对象</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.Sum(Light.Data.QueryExpression,Light.Data.DataFieldInfo)">
            <summary>
            对字段总和进行条件统计
            </summary>
            <param name="expression">条件表达式</param>
            <param name="fieldInfo">统计字段</param>
            <returns>函数对象</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.Sum(Light.Data.QueryExpression,Light.Data.DataFieldInfo,System.Boolean)">
            <summary>
            对字段总和进行条件统计
            </summary>
            <param name="expression">条件表达式</param>
            <param name="fieldInfo">统计字段</param>
            <param name="isDistinct">是否去重复</param>
            <returns>函数对象</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.Avg(Light.Data.DataFieldInfo)">
            <summary>
            对字段进行平均值统计
            </summary>
            <param name="fieldInfo">统计字段</param>
            <returns>函数对象</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.Avg(Light.Data.DataFieldInfo,System.Boolean)">
            <summary>
            对字段进行平均值统计
            </summary>
            <param name="fieldInfo">统计字段</param>
            <param name="isDistinct">是否去重复</param>
            <returns>函数对象</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.Avg(Light.Data.QueryExpression,Light.Data.DataFieldInfo)">
            <summary>
            对字段进行平均值条件统计
            </summary>
            <param name="expression">条件表达式</param>
            <param name="fieldInfo">统计字段</param>
            <returns>函数对象</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.Avg(Light.Data.QueryExpression,Light.Data.DataFieldInfo,System.Boolean)">
            <summary>
            对字段进行平均值条件统计
            </summary>
            <param name="expression">条件表达式</param>
            <param name="fieldInfo">统计字段</param>
            <param name="isDistinct">是否去重复</param>
            <returns>函数对象</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.Max(Light.Data.DataFieldInfo)">
            <summary>
            统计最大值
            </summary>
            <param name="fieldInfo">统计字段</param>
            <returns>函数对象</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.Min(Light.Data.DataFieldInfo)">
            <summary>
            统计最小值
            </summary>
            <param name="fieldInfo">统计字段</param>
            <returns>函数对象</returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.Equals(Light.Data.AggregateFunction)">
            <summary>
            匹配对象是否相等
            </summary>
            <param name="target">匹配对象</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.EqualsDetail(Light.Data.AggregateFunction)">
            <summary>
            匹配对象细节是否相等
            </summary>
            <param name="function">匹配对象</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.Equals(System.Object)">
            <summary>
            匹配对象是否相等
            </summary>
            <param name="obj">匹配对象</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.AggregateFunction.GetHashCode">
            <summary>
            获取哈希码
            </summary>
            <returns></returns>
        </member>
        <member name="T:Light.Data.AggregateType">
            <summary>
            统计类型
            </summary>
        </member>
        <member name="F:Light.Data.AggregateType.COUNT">
            <summary>
            总数
            </summary>
        </member>
        <member name="F:Light.Data.AggregateType.AVG">
            <summary>
            平均值
            </summary>
        </member>
        <member name="F:Light.Data.AggregateType.MAX">
            <summary>
            最大值
            </summary>
        </member>
        <member name="F:Light.Data.AggregateType.MIN">
            <summary>
            最小值
            </summary>
        </member>
        <member name="F:Light.Data.AggregateType.SUM">
            <summary>
            总和
            </summary>
        </member>
        <member name="T:Light.Data.AggregateFieldAttribute">
            <summary>
            统计字段属性
            </summary>
        </member>
        <member name="M:Light.Data.AggregateFieldAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Light.Data.AggregateFieldAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">字段名称</param>
        </member>
        <member name="P:Light.Data.AggregateFieldAttribute.Name">
            <summary>
            查询别名
            </summary>
        </member>
        <member name="T:Light.Data.AggregateTableAttribute">
            <summary>
            统计表属性
            </summary>
        </member>
        <member name="M:Light.Data.AggregateTableAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Light.Data.AggregateTableAttribute.#ctor(System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="relateType">关联表类型</param>
        </member>
        <member name="P:Light.Data.AggregateTableAttribute.RelateType">
            <summary>
            关联表类型
            </summary>
        </member>
        <member name="P:Light.Data.AggregateTableAttribute.ExtendParams">
            <summary>
            扩展参数
            </summary>
        </member>
        <member name="T:Light.Data.DataFieldAttribute">
            <summary>
            数据字段属性
            </summary>
        </member>
        <member name="M:Light.Data.DataFieldAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">字段名称</param>
        </member>
        <member name="M:Light.Data.DataFieldAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Light.Data.DataFieldAttribute.Name">
            <summary>
            数据库列名
            </summary>
        </member>
        <member name="P:Light.Data.DataFieldAttribute.IsNullable">
            <summary>
            是否可空
            </summary>
        </member>
        <member name="P:Light.Data.DataFieldAttribute.IsPrimaryKey">
            <summary>
            是否主键
            </summary>
        </member>
        <member name="P:Light.Data.DataFieldAttribute.IsIdentity">
            <summary>
            是否自增ID
            </summary>
        </member>
        <member name="P:Light.Data.DataFieldAttribute.DBType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="P:Light.Data.DataFieldAttribute.DefaultValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="P:Light.Data.DataFieldAttribute.DataOrder">
            <summary>
            数据顺序
            </summary>
        </member>
        <member name="T:Light.Data.RelationAttribute">
            <summary>
            数据表关联属性,只能在DataEntity基类中有效
            </summary>
        </member>
        <member name="M:Light.Data.RelationAttribute.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="masterKey">主表关联键</param>
            <param name="relateKey">关联表关联键</param>
        </member>
        <member name="P:Light.Data.RelationAttribute.MasterKey">
            <summary>
            主表关联键
            </summary>
        </member>
        <member name="P:Light.Data.RelationAttribute.RelateKey">
            <summary>
            关联表关联键
            </summary>
        </member>
        <member name="T:Light.Data.RelationPropertyAttribute">
            <summary>
            相关联对象属性,设定后该对象会被赋到关联结果指定的属性中,指定的属性类型必须与本数据类型一致
            </summary>
        </member>
        <member name="M:Light.Data.RelationPropertyAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="propertyName">关联的对象属性名称</param>
        </member>
        <member name="P:Light.Data.RelationPropertyAttribute.PropertyName">
            <summary>
            关联的对象属性名称
            </summary>
        </member>
        <member name="T:Light.Data.CatchOperatorsType">
            <summary>
            连接操作符类型
            </summary>
        </member>
        <member name="F:Light.Data.CatchOperatorsType.AND">
            <summary>
            与连接
            </summary>
        </member>
        <member name="F:Light.Data.CatchOperatorsType.OR">
            <summary>
            或连接
            </summary>
        </member>
        <member name="T:Light.Data.DataContext">
            <summary>
            数据库上下文
            </summary>
        </member>
        <member name="M:Light.Data.DataContext.SetAssemblyConfig">
            <summary>
            设置程序集配置
            </summary>
        </member>
        <member name="M:Light.Data.DataContext.Create(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="index">配置文件中连接字符串的索引</param>
        </member>
        <member name="M:Light.Data.DataContext.Create(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionStringName">配置文件中连接字符串的名称</param>
        </member>
        <member name="M:Light.Data.DataContext.Create(System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">连接名称</param>
            <param name="connectionString">连接字符串</param>
            <param name="providerName">提供类型名称</param>
        </member>
        <member name="M:Light.Data.DataContext.Create(System.Configuration.ConnectionStringSettings)">
            <summary>
            创建数据上下文
            </summary>
            <param name="setting">数据连接设置</param>
            <returns>数据上下文</returns>
        </member>
        <member name="F:Light.Data.DataContext._connectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="F:Light.Data.DataContext._dataBase">
            <summary>
            数据库对象
            </summary>
        </member>
        <member name="F:Light.Data.DataContext._configName">
            <summary>
            数据库配置名称
            </summary>
        </member>
        <member name="M:Light.Data.DataContext.SetInnerPager(System.Boolean)">
            <summary>
            设置是否打开内分页功能
            </summary>
            <param name="enable">打开/关闭</param>
            <returns>设置是否成功,如数据库不支持内分页,则打开操作返回false</returns>
        </member>
        <member name="M:Light.Data.DataContext.#ctor(System.String,System.String,Light.Data.Database)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="configName">配置名称</param>
            <param name="dataBase">数据库实例</param>
        </member>
        <member name="M:Light.Data.DataContext.GetTableName(System.Type)">
            <summary>
            获取该类的对应关联表名 
            </summary>
            <param name="type">类名</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.GetTableName``1">
            <summary>
            获取该类的对应关联表名
            </summary>
            <typeparam name="T"></typeparam>
            <returns>表名</returns>
        </member>
        <member name="M:Light.Data.DataContext.Insert(System.Object)">
            <summary>
            新增数据
            </summary>
            <param name="data">数据对象</param>
            <returns>受影响行数</returns>
        </member>
        <member name="M:Light.Data.DataContext.Update(System.Object)">
            <summary>
            更新数据
            </summary>
            <param name="data">数据对象</param>
            <returns>受影响行数</returns>
        </member>
        <member name="M:Light.Data.DataContext.Update(System.Object,System.String[])">
            <summary>
            更新数据
            </summary>
            <param name="data">数据对象</param>
            <param name="updateFields">需更新字段</param>
            <returns>受影响行数</returns>
        </member>
        <member name="M:Light.Data.DataContext.Delete(System.Object)">
            <summary>
            删除数据
            </summary>
            <param name="data">数据对象</param>
            <returns>受影响行数</returns>
        </member>
        <member name="M:Light.Data.DataContext.CreateNew``1">
            <summary>
            创建新对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <returns>数据对象</returns>
        </member>
        <member name="M:Light.Data.DataContext.DeleteMass``1(Light.Data.QueryExpression)">
            <summary>
            批量删除数据
            </summary>
            <typeparam name="T">删除对象类型</typeparam>
            <param name="expression">查询表达式</param>
            <returns>受影响行数</returns>
        </member>
        <member name="M:Light.Data.DataContext.DeleteMass``1">
            <summary>
            批量删除数据
            </summary>
            <typeparam name="T">删除对象类型</typeparam>
            <returns>受影响行数</returns>
        </member>
        <member name="M:Light.Data.DataContext.DeleteMass(System.Type,Light.Data.QueryExpression)">
            <summary>
            批量删除数据
            </summary>
            <param name="type">删除对象类型</param>
            <param name="expression">查询表达式</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.DeleteMass(Light.Data.Mappings.DataTableEntityMapping,Light.Data.QueryExpression)">
            <summary>
            批量删除数据
            </summary>
            <param name="mapping">表映射</param>
            <param name="expression">表达式</param>
            <returns>受影响行数</returns>
        </member>
        <member name="M:Light.Data.DataContext.UpdateMass``1(Light.Data.UpdateSetValue[],Light.Data.QueryExpression)">
            <summary>
            批量更新数据
            </summary>
            <typeparam name="T">更新对象类型</typeparam>
            <param name="updates">更新字段值数组,类型必须和更新对象一致</param>
            <param name="expression">查询表达式</param>
            <returns>受影响行数</returns>
        </member>
        <member name="M:Light.Data.DataContext.UpdateMass``1(Light.Data.UpdateSetValue[])">
            <summary>
            批量更新数据
            </summary>
            <typeparam name="T">更新对象类型</typeparam>
            <param name="updates">更新字段值数组,类型必须和更新对象一致</param>
            <returns>受影响行数</returns>
        </member>
        <member name="M:Light.Data.DataContext.UpdateMass(System.Type,Light.Data.UpdateSetValue[],Light.Data.QueryExpression)">
            <summary>
            批量更新数据
            </summary>
            <param name="type">更新对象类型</param>
            <param name="updates">更新对象类型</param>
            <param name="expression">查询表达式</param>
            <returns>受影响行数</returns>
        </member>
        <member name="M:Light.Data.DataContext.UpdateMass(Light.Data.Mappings.DataTableEntityMapping,Light.Data.UpdateSetValue[],Light.Data.QueryExpression)">
            <summary>
            批量更新数据
            </summary>
            <param name="mapping">表映射</param>
            <param name="updates">更新对象类型</param>
            <param name="expression">查询表达式</param>
            <returns>受影响行数</returns>
        </member>
        <member name="M:Light.Data.DataContext.BulkInsert(System.Array)">
            <summary>
            批量插入数据
            </summary>
            <param name="datas">数据数组</param>
            <returns>返回插入数据数量</returns>
        </member>
        <member name="M:Light.Data.DataContext.SelectSingleFromKey``1(System.Object[])">
            <summary>
            从主键获取数据对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="primaryKeys">主键数组</param>
            <returns>数据对象</returns>
        </member>
        <member name="M:Light.Data.DataContext.SelectSingleFromId``1(System.Int32)">
            <summary>
            从自增ID获取数据对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="id">自增ID</param>
            <returns>数据对象</returns>
        </member>
        <member name="M:Light.Data.DataContext.SelectSingleFromId``1(System.UInt32)">
            <summary>
            从自增ID获取数据对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="id">自增ID</param>
            <returns>数据对象</returns>
        </member>
        <member name="M:Light.Data.DataContext.SelectSingleFromId``1(System.Int64)">
            <summary>
            从自增ID获取数据对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="id">自增ID</param>
            <returns>数据对象</returns>
        </member>
        <member name="M:Light.Data.DataContext.SelectSingleFromId``1(System.UInt64)">
            <summary>
            从自增ID获取数据对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="id">自增ID</param>
            <returns>数据对象</returns>
        </member>
        <member name="M:Light.Data.DataContext.SelectSingleFromIdObj``1(System.Object)">
            <summary>
            从自增ID获取数据对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="id">自增</param>
            <returns>数据对象</returns>
        </member>
        <member name="M:Light.Data.DataContext.LQuery``1">
            <summary>
            生成数据查询对象
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <returns>数据查询对象</returns>
        </member>
        <member name="M:Light.Data.DataContext.LAggregate``1">
            <summary>
            生成数据统计对象
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <returns>数据查询对象</returns>
        </member>
        <member name="M:Light.Data.DataContext.QueryDataEnumerable(Light.Data.Mappings.DataEntityMapping,Light.Data.QueryExpression,Light.Data.OrderExpression,Light.Data.Region,Light.Data.SafeLevel)">
            <summary>
            生成数据查询枚举
            </summary>
            <param name="mapping">数据映射</param>
            <param name="query">查询表达式</param>
            <param name="order">排序表达式</param>
            <param name="region">查询范围</param>
            <param name="level">安全级别</param>
            <returns>数据枚举</returns>
        </member>
        <member name="M:Light.Data.DataContext.QueryDataList(Light.Data.Mappings.DataEntityMapping,Light.Data.QueryExpression,Light.Data.OrderExpression,Light.Data.Region,Light.Data.SafeLevel)">
            <summary>
            生成数据查询枚举
            </summary>
            <param name="mapping">数据映射</param>
            <param name="query">查询表达式</param>
            <param name="order">排序表达式</param>
            <param name="region">查询范围</param>
            <param name="level">安全级别</param>
            <returns>数据集合</returns>
        </member>
        <member name="M:Light.Data.DataContext.QueryColumeEnumerable(Light.Data.DataFieldInfo,Light.Data.QueryExpression,Light.Data.OrderExpression,Light.Data.Region,System.Boolean,Light.Data.SafeLevel)">
            <summary>
            查询单列数据
            </summary>
            <param name="fieldInfo">单列数据字段</param>
            <param name="query">查询表达式</param>
            <param name="order">排序表达式</param>
            <param name="region">查询范围</param>
            <param name="distinct">是否排除重复</param>
            <param name="level">安全级别</param>
            <returns>单列数据枚举</returns>
        </member>
        <member name="M:Light.Data.DataContext.QueryColumeEnumerable(Light.Data.DataFieldInfo,System.Type,System.Boolean,Light.Data.QueryExpression,Light.Data.OrderExpression,Light.Data.Region,System.Boolean,Light.Data.SafeLevel)">
            <summary>
            查询单列数据
            </summary>
            <param name="fieldInfo">字段信息</param>
            <param name="outputType">输出类型</param>
            <param name="isNullable">是否可空</param>
            <param name="query">查询表达式</param>
            <param name="order">排序表达式</param>
            <param name="region">查询范围</param>
            <param name="distinct">是否排除重复</param>
            <param name="level">安全级别</param>
            <returns>单列数据枚举</returns>
        </member>
        <member name="M:Light.Data.DataContext.QueryColumeList(Light.Data.DataFieldInfo,Light.Data.QueryExpression,Light.Data.OrderExpression,Light.Data.Region,System.Boolean,Light.Data.SafeLevel)">
            <summary>
            查询单列数据
            </summary>
            <param name="fieldInfo">单列数据字段</param>
            <param name="query">查询表达式</param>
            <param name="order">排序表达式</param>
            <param name="region">查询范围</param>
            <param name="distinct">是否排除重复</param>
            <param name="level">安全级别</param>
            <returns>数据集合</returns>
        </member>
        <member name="M:Light.Data.DataContext.QueryColumeList(Light.Data.DataFieldInfo,System.Type,System.Boolean,Light.Data.QueryExpression,Light.Data.OrderExpression,Light.Data.Region,System.Boolean,Light.Data.SafeLevel)">
            <summary>
            查询单列数据
            </summary>
            <param name="fieldInfo">字段信息</param>
            <param name="outputType">输出类型</param>
            <param name="isNullable">是否可空</param>
            <param name="query">查询表达式</param>
            <param name="order">排序表达式</param>
            <param name="region">查询范围</param>
            <param name="distinct">是否排除重复</param>
            <param name="level">安全级别</param>
            <returns>数据集合</returns>
        </member>
        <member name="M:Light.Data.DataContext.QueryDynamicAggregateTable(Light.Data.Mappings.DataEntityMapping,System.Collections.Generic.Dictionary{System.String,Light.Data.DataFieldInfo},System.Collections.Generic.Dictionary{System.String,Light.Data.AggregateFunction},Light.Data.QueryExpression,Light.Data.AggregateHavingExpression,Light.Data.OrderExpression,Light.Data.SafeLevel)">
            <summary>
            动态统计数据到数据表中
            </summary>
            <param name="mapping">数据映射</param>
            <param name="dataFieldInfoDictionary">统计字段信息</param>
            <param name="aggregateFunctionDictionary">统计方法信息</param>
            <param name="query">查询表达式</param>
            <param name="having">统计查询表达式</param>
            <param name="order">排序表达式</param>
            <param name="level">安全级别</param>
            <returns>数据表</returns>
        </member>
        <member name="M:Light.Data.DataContext.QueryDynamicAggregateList(Light.Data.Mappings.DataEntityMapping,Light.Data.Mappings.AggregateTableMapping,System.Collections.Generic.Dictionary{System.String,Light.Data.DataFieldInfo},System.Collections.Generic.Dictionary{System.String,Light.Data.AggregateFunction},Light.Data.QueryExpression,Light.Data.AggregateHavingExpression,Light.Data.OrderExpression,Light.Data.SafeLevel)">
            <summary>
            动态统计数据到数据集合中
            </summary>
            <param name="mapping">数据映射</param>
            <param name="amapping">统计结果类型</param>
            <param name="dataFieldInfoDictionary">统计字段信息</param>
            <param name="aggregateFunctionDictionary">统计方法信息</param>
            <param name="query">查询表达式</param>
            <param name="having">统计查询表达式</param>
            <param name="order">排序表达式</param>
            <param name="level">安全级别</param>
            <returns>数据集合</returns>
        </member>
        <member name="M:Light.Data.DataContext.SelectSingle(Light.Data.Mappings.DataEntityMapping,Light.Data.QueryExpression,Light.Data.OrderExpression,System.Int32,Light.Data.SafeLevel)">
            <summary>
            获取查询单个数据
            </summary>
            <param name="mapping">数据对象映射表</param>
            <param name="query">查询表达式</param>
            <param name="order">排序表达式</param>
            <param name="index">数据索引</param>
            <param name="level">安全级别</param>
            <returns>数据对象</returns>
        </member>
        <member name="M:Light.Data.DataContext.AggregateCount(Light.Data.Mappings.DataEntityMapping,Light.Data.QueryExpression,Light.Data.SafeLevel)">
            <summary>
            统计行数
            </summary>
            <param name="mapping">数据映射表</param>
            <param name="query">查询表达式</param>
            <param name="level"></param>
            <returns>查询行数</returns>
        </member>
        <member name="M:Light.Data.DataContext.Aggregate(Light.Data.Mappings.DataFieldMapping,Light.Data.AggregateType,Light.Data.QueryExpression,System.Boolean,Light.Data.SafeLevel)">
            <summary>
            统计字段函数
            </summary>
            <param name="fieldMapping">统计字段</param>
            <param name="aggregateType">统计方式</param>
            <param name="query">查询表达式</param>
            <param name="distinct">是否排除重复</param>
            <param name="level">安全级别</param>
            <returns>统计结果</returns>
        </member>
        <member name="M:Light.Data.DataContext.Exists(Light.Data.Mappings.DataEntityMapping,Light.Data.QueryExpression,Light.Data.SafeLevel)">
            <summary>
            查询数据是否存在
            </summary>
            <param name="mapping">数据映射表</param>
            <param name="query">查询表达式</param>
            <param name="level">安全级别</param>
            <returns>结果</returns>
        </member>
        <member name="M:Light.Data.DataContext.QueryDataTable(System.Data.IDbCommand,Light.Data.Region,Light.Data.SafeLevel)">
            <summary>
            DataTable读取
            </summary>
            <param name="dbcommand">数据类型</param>
            <param name="region">查询范围</param>
            <param name="level">安全级别</param>
            <returns>DataTable对象</returns>
        </member>
        <member name="M:Light.Data.DataContext.CreateTransDataContext">
            <summary>
            创建事务型数据上下文
            </summary>
            <returns>事务型数据上下文</returns>
        </member>
        <member name="M:Light.Data.DataContext.CreateSqlStringExecutor(System.String,Light.Data.DataParameter[],Light.Data.SafeLevel)">
            <summary>
            创建SQL字符串执行器
            </summary>
            <param name="sqlString">SQL字符串</param>
            <param name="param">参数数组</param>
            <param name="level">安全等级</param>
            <returns>SQL执行器</returns>
        </member>
        <member name="M:Light.Data.DataContext.CreateSqlStringExecutor(System.String,Light.Data.DataParameter[])">
            <summary>
            创建SQL字符串执行器
            </summary>
            <param name="sqlString">SQL字符串</param>
            <param name="param">参数数组</param>
            <returns>SQL执行器</returns>
        </member>
        <member name="M:Light.Data.DataContext.CreateSqlStringExecutor(System.String,Light.Data.SafeLevel)">
            <summary>
            创建SQL字符串执行器
            </summary>
            <param name="sqlString">SQL字符串</param>
            <param name="level">安全等级</param>
            <returns>SQL执行器</returns>
        </member>
        <member name="M:Light.Data.DataContext.CreateSqlStringExecutor(System.String)">
            <summary>
            创建SQL字符串执行器
            </summary>
            <param name="sqlString">SQL字符串</param>
            <returns>SQL执行器</returns>
        </member>
        <member name="M:Light.Data.DataContext.CreateStoreProcedureExecutor(System.String,Light.Data.DataParameter[],Light.Data.SafeLevel)">
            <summary>
            创建SQL存储过程执行器
            </summary>
            <param name="storeProcedure">SQL存储过程</param>
            <param name="param">参数数组</param>
            <param name="level">安全等级</param>
            <returns>SQL执行器</returns>
        </member>
        <member name="M:Light.Data.DataContext.CreateStoreProcedureExecutor(System.String,Light.Data.DataParameter[])">
            <summary>
            创建存储过程执行器
            </summary>
            <param name="storeProcedure">SQL存储过程</param>
            <param name="param">参数数组</param>
            <returns>SQL执行器</returns>
        </member>
        <member name="M:Light.Data.DataContext.CreateStoreProcedureExecutor(System.String,Light.Data.SafeLevel)">
            <summary>
            创建存储过程执行器
            </summary>
            <param name="storeProcedure">SQL存储过程</param>
            <param name="level">安全等级</param>
            <returns>SQL执行器</returns>
        </member>
        <member name="M:Light.Data.DataContext.CreateStoreProcedureExecutor(System.String)">
            <summary>
            创建存储过程执行器
            </summary>
            <param name="storeProcedure">SQL存储过程</param>
            <returns>SQL执行器</returns>
        </member>
        <member name="P:Light.Data.DataContext.Current">
            <summary>
            当前数据连接上下文
            </summary>
        </member>
        <member name="P:Light.Data.DataContext.DataBase">
            <summary>
            获取数据库对象
            </summary>
        </member>
        <member name="P:Light.Data.DataContext.ConfigName">
            <summary>
            数据库连接配置名称
            </summary>
        </member>
        <member name="P:Light.Data.DataContext.TimeOut">
            <summary>
            设置和获取命令超时时间
            </summary>
        </member>
        <member name="P:Light.Data.DataContext.IsInnerPager">
            <summary>
            获取是否已打开内分页功能
            </summary>
        </member>
        <member name="T:Light.Data.DataContextCollection">
            <summary>
            数据库连接集合
            </summary>
        </member>
        <member name="M:Light.Data.DataContextCollection.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Light.Data.DataContextCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            复制
            </summary>
            <param name="array">对象数组</param>
            <param name="index">复制索引</param>
        </member>
        <member name="M:Light.Data.DataContextCollection.GetEnumerator">
            <summary>
            枚举接口
            </summary>
            <returns></returns>
        </member>
        <member name="P:Light.Data.DataContextCollection.Default">
            <summary>
            默认数据上下文
            </summary>
        </member>
        <member name="P:Light.Data.DataContextCollection.Count">
            <summary>
            集合数量
            </summary>
        </member>
        <member name="P:Light.Data.DataContextCollection.IsSynchronized">
            <summary>
            是否同步
            </summary>
        </member>
        <member name="P:Light.Data.DataContextCollection.SyncRoot">
            <summary>
            同步对象
            </summary>
        </member>
        <member name="P:Light.Data.DataContextCollection.Item(System.String)">
            <summary>
            获取该连接名称的数据库连接
            </summary>
            <param name="connectionStringName">数据库连接名称</param>
            <returns>数据库连接</returns>
        </member>
        <member name="T:Light.Data.DataContextConfiguration">
            <summary>
            数据库连接配置器
            </summary>
        </member>
        <member name="F:Light.Data.DataContextConfiguration._defaultContext">
            <summary>
            默认数据上下文
            </summary>
        </member>
        <member name="M:Light.Data.DataContextConfiguration.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="P:Light.Data.DataContextConfiguration.ContextCollection">
            <summary>
            数据库连接集合
            </summary>
        </member>
        <member name="P:Light.Data.DataContextConfiguration.Default">
            <summary>
            设置和获取默认数据上下文
            </summary>
        </member>
        <member name="T:Light.Data.DataEntity">
            <summary>
            基础数据实体
            </summary>
        </member>
        <member name="F:Light.Data.DataEntity._context">
            <summary>
            数据库上下文
            </summary>
        </member>
        <member name="M:Light.Data.DataEntity.SetContext(Light.Data.DataContext)">
            <summary>
            设置当前数据库连接上下文到对象
            </summary>
            <param name="context">数据库连接上下文</param>
        </member>
        <member name="F:Light.Data.DataEntity.synobj1">
            <summary>
             线程同步锁
            </summary>
        </member>
        <member name="F:Light.Data.DataEntity.synobj2">
            <summary>
             线程同步锁
            </summary>
        </member>
        <member name="F:Light.Data.DataEntity._tempRelationDatas">
            <summary>
            关联数据储存
            </summary>
        </member>
        <member name="M:Light.Data.DataEntity.RefleshData">
            <summary>
            重置关联数据
            </summary>
        </member>
        <member name="M:Light.Data.DataEntity.LoadRelationData(System.String,System.Boolean)">
            <summary>
            读取关联数据
            </summary>
            <param name="keyName">关联字段属性名称</param>
            <param name="cacheData">是否缓存数据</param>
            <returns>关联数据</returns>
        </member>
        <member name="M:Light.Data.DataEntity.LoadRelationData(System.String,Light.Data.QueryExpression,Light.Data.OrderExpression,System.Boolean)">
            <summary>
            读取关联数据
            </summary>
            <param name="keyName">关联字段属性名称</param>
            <param name="extendQuery">扩展查询</param>
            <param name="extendOrder">扩展排序</param>
            <param name="cacheData">是否缓存数据</param>
            <returns>关联数据</returns>
        </member>
        <member name="M:Light.Data.DataEntity.LoadRelationData(System.String)">
            <summary>
            读取关联数据
            </summary>
            <param name="keyName">关联字段属性名称</param>
            <returns>关联数据</returns>
        </member>
        <member name="M:Light.Data.DataEntity.LoadRelationData(System.String,Light.Data.QueryExpression)">
            <summary>
            读取关联数据
            </summary>
            <param name="keyName">关联字段属性名称</param>
            <param name="extendQuery">扩展查询</param>
            <returns>关联数据</returns>
        </member>
        <member name="M:Light.Data.DataEntity.LoadRelationData(System.String,Light.Data.OrderExpression)">
            <summary>
            读取关联数据
            </summary>
            <param name="keyName">关联字段属性名称</param>
            <param name="extendOrder">扩展排序</param>
            <returns>关联数据</returns>
        </member>
        <member name="M:Light.Data.DataEntity.LoadRelationData(System.String,Light.Data.QueryExpression,Light.Data.OrderExpression)">
            <summary>
            读取关联数据
            </summary>
            <param name="keyName">关联字段属性名称</param>
            <param name="extendQuery">扩展查询</param>
            <param name="extendOrder">扩展排序</param>
            <returns>关联数据</returns>
        </member>
        <member name="M:Light.Data.DataEntity.LoadDataComplete">
            <summary>
            数据读取完成
            </summary>
        </member>
        <member name="P:Light.Data.DataEntity.Context">
            <summary>
            数据库上下文
            </summary>
        </member>
        <member name="P:Light.Data.DataEntity.TempRelationDatas">
            <summary>
            关联数据储存
            </summary>
        </member>
        <member name="T:Light.Data.DataParameter">
            <summary>
            数据参数
            </summary>
        </member>
        <member name="M:Light.Data.DataParameter.#ctor(System.String,System.Object,System.String,System.Data.ParameterDirection)">
            <summary>
            构造函数
            </summary>
            <param name="paramName">参数名称</param>
            <param name="paramValue">参数值</param>
            <param name="dbType">数据类型</param>
            <param name="direction">数据方向</param>
        </member>
        <member name="M:Light.Data.DataParameter.#ctor(System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="paramName">参数名称</param>
            <param name="paramValue">参数值</param>
        </member>
        <member name="M:Light.Data.DataParameter.#ctor(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            构造函数
            </summary>
            <param name="paramName">参数名称</param>
            <param name="paramValue">参数值</param>
            <param name="direction">数据方向</param>
        </member>
        <member name="M:Light.Data.DataParameter.#ctor(System.String,System.Object,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="paramName">参数名称</param>
            <param name="paramValue">参数值</param>
            <param name="dbType">数据类型</param>
        </member>
        <member name="M:Light.Data.DataParameter.SetDataParameter(System.Data.IDataParameter)">
            <summary>
            设置IDataParameter,用以获取输出参数
            </summary>
            <param name="dataParameter"></param>
        </member>
        <member name="P:Light.Data.DataParameter.ParameterName">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="P:Light.Data.DataParameter.Value">
            <summary>
            参数值
            </summary>
        </member>
        <member name="P:Light.Data.DataParameter.DbType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="P:Light.Data.DataParameter.Direction">
            <summary>
            数据方向
            </summary>
        </member>
        <member name="P:Light.Data.DataParameter.OutputValue">
            <summary>
            输出值
            </summary>
        </member>
        <member name="T:Light.Data.DataFieldInfo`1">
            <summary>
            字段信息,用户生成查询或排序表达式
            </summary>
            <typeparam name="T">字段类型</typeparam>
        </member>
        <member name="M:Light.Data.DataFieldInfo`1.Create(System.String)">
            <summary>
            创建字段信息
            </summary>
            <param name="name">字段名称</param>
            <returns>字段信息</returns>
        </member>
        <member name="T:Light.Data.AggregateTable`1">
            <summary>
            统计表生成器
            </summary>
            <typeparam name="T">要统计的表类型</typeparam>
        </member>
        <member name="M:Light.Data.AggregateTable`1.Reset">
            <summary>
            重置条件语句
            </summary>
            <returns>统计表生成器</returns>
        </member>
        <member name="M:Light.Data.AggregateTable`1.GetDataTable">
            <summary>
            生成统计表的DataTable
            </summary>
            <returns>统计表生成器</returns>
        </member>
        <member name="M:Light.Data.AggregateTable`1.GetObjectList``1">
            <summary>
            生成统计表的类型集合
            </summary>
            <typeparam name="K">生成类型</typeparam>
            <returns>类型集合</returns>
        </member>
        <member name="M:Light.Data.AggregateTable`1.GroupBy(Light.Data.DataFieldInfo)">
            <summary>
            加入分组字段
            </summary>
            <param name="fieldInfo">分组字段</param>
            <returns>统计表生成器</returns>
        </member>
        <member name="M:Light.Data.AggregateTable`1.GroupBy(Light.Data.DataFieldInfo,System.String)">
            <summary>
            添加分组字段
            </summary>
            <param name="fieldInfo">分组字段</param>
            <param name="alias">查询别名,与字段配置字段对应</param>
            <returns>统计表生成器</returns>
        </member>
        <member name="M:Light.Data.AggregateTable`1.Aggregate(Light.Data.AggregateFunction,System.String)">
            <summary>
            添加聚合方法
            </summary>
            <param name="function">聚合函数</param>
            <param name="alias">查询别名,与字段配置字段对应</param>
            <returns>统计表生成器</returns>
        </member>
        <member name="M:Light.Data.AggregateTable`1.Having(Light.Data.AggregateHavingExpression)">
            <summary>
            添加统计够查询条件
            </summary>
            <param name="expression">查询表达式</param>
            <returns>统计表生成器</returns>
        </member>
        <member name="M:Light.Data.AggregateTable`1.OrderBy(Light.Data.OrderExpression)">
            <summary>
            添加排序表达式
            </summary>
            <param name="expression">排序表达式</param>
            <returns>统计表生成器</returns>
        </member>
        <member name="M:Light.Data.AggregateTable`1.Where(Light.Data.QueryExpression)">
            <summary>
            添加查询表达式
            </summary>
            <param name="expression">查询表达式</param>
            <returns>统计表生成器</returns>
        </member>
        <member name="M:Light.Data.AggregateTable`1.GetDbCommand">
            <summary>
            生成命令
            </summary>
            <returns>命令接口</returns>
        </member>
        <member name="M:Light.Data.AggregateTable`1.ToString">
            <summary>
            输出查询命令语句
            </summary>
            <returns>查询命令语句</returns>
        </member>
        <member name="T:Light.Data.Expressions.OrderType">
            <summary>
            排序类型
            </summary>
        </member>
        <member name="F:Light.Data.Expressions.OrderType.ASC">
            <summary>
            顺序
            </summary>
        </member>
        <member name="F:Light.Data.Expressions.OrderType.DESC">
            <summary>
            倒序
            </summary>
        </member>
        <member name="M:Light.Data.Database.CreateConnection">
            <summary>
            创建数据库连接
            </summary>
            <returns>数据库连接</returns>
        </member>
        <member name="M:Light.Data.Database.CreateConnection(System.String)">
            <summary>
            创建数据库连接
            </summary>
            <param name="connectionString">连接字符串</param>
            <returns>数据库连接</returns>
        </member>
        <member name="M:Light.Data.Database.CreateDataAdapter(System.Data.IDbCommand)">
            <summary>
            创建数据适配器
            </summary>
            <param name="cmd">数据库命令</param>
            <returns>数据适配器</returns>
        </member>
        <member name="M:Light.Data.Database.CreateCommand(System.String)">
            <summary>
            创建数据库命令
            </summary>
            <param name="sql">SQL语句</param>
            <returns>数据库命令</returns>
        </member>
        <member name="M:Light.Data.Database.CreateCommand">
            <summary>
            创建数据库命令
            </summary>
            <returns>数据库命令</returns>
        </member>
        <member name="M:Light.Data.Database.CreateParameter(System.String,System.Object,System.String,System.Data.ParameterDirection)">
            <summary>
            创建SQL参数
            </summary>
            <param name="name">参数名称</param>
            <param name="value">参数值</param>
            <param name="dbType">参数数据库类型</param>
            <param name="direction">参数方向</param>
            <returns>SQL参数</returns>
        </member>
        <member name="M:Light.Data.Database.FormatStoredProcedureParameter(System.Data.IDataParameter)">
            <summary>
            格式化存储过程参数
            </summary>
            <param name="dataParmeter">存储过程参数</param>
        </member>
        <member name="M:Light.Data.Database.SetExtentArguments(System.String)">
            <summary>
            设置扩展参数
            </summary>
            <param name="arguments">扩展参数</param>
        </member>
        <member name="P:Light.Data.Database.Factory">
            <summary>
            获取数据库命令工厂
            </summary>
        </member>
        <member name="P:Light.Data.Database.CommandTimeOut">
            <summary>
            设置和获取命令超时时间
            </summary>
        </member>
        <member name="P:Light.Data.Database.InnerPager">
            <summary>
            设置和获取是否使用内分页
            </summary>
        </member>
        <member name="M:Light.Data.Mappings.PrimitiveDataDefine.LoadData(Light.Data.DataContext,System.Data.IDataReader)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="datareader"></param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.Mappings.PrimitiveDataDefine.LoadData(Light.Data.DataContext,System.Data.DataRow)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="datarow"></param>
            <returns></returns>
        </member>
        <member name="T:Light.Data.SafeLevel">
            <summary>
            安全级别
            </summary>
        </member>
        <member name="F:Light.Data.SafeLevel.Default">
            <summary>
            默认值
            </summary>
        </member>
        <member name="F:Light.Data.SafeLevel.None">
            <summary>
            无安全事务
            </summary>
        </member>
        <member name="F:Light.Data.SafeLevel.Low">
            <summary>
            低级别
            </summary>
        </member>
        <member name="F:Light.Data.SafeLevel.Normal">
            <summary>
            标准级别
            </summary>
        </member>
        <member name="F:Light.Data.SafeLevel.High">
            <summary>
            高级别
            </summary>
        </member>
        <member name="T:Light.Data.LEnumerable`1">
            <summary>
            枚举查询器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Light.Data.LEnumerable`1.Reset">
            <summary>
            重置条件语句
            </summary>
            <returns> 枚举查询器</returns>
        </member>
        <member name="M:Light.Data.LEnumerable`1.Where(Light.Data.QueryExpression)">
            <summary>
            添加查询表达式
            </summary>
            <param name="expression">查询表达式</param>
            <returns> 枚举查询器</returns>
        </member>
        <member name="M:Light.Data.LEnumerable`1.Where(Light.Data.QueryExpression,Light.Data.CatchOperatorsType)">
            <summary>
            添加查询表达式
            </summary>
            <param name="expression">查询表达式</param>
            <param name="catchType">连接操作符类型</param>
            <returns> 枚举查询器</returns>
        </member>
        <member name="M:Light.Data.LEnumerable`1.OrderBy(Light.Data.OrderExpression)">
            <summary>
            添加排序表达式
            </summary>
            <param name="expression"></param>
            <returns> 枚举查询器</returns>
        </member>
        <member name="M:Light.Data.LEnumerable`1.Take(System.Int32)">
            <summary>
            获取的数据行数
            </summary>
            <param name="count"></param>
            <returns> 枚举查询器</returns>
        </member>
        <member name="M:Light.Data.LEnumerable`1.Skip(System.Int32)">
            <summary>
             需要跳过的数据行数
            </summary>
            <param name="index"></param>
            <returns> 枚举查询器</returns>
        </member>
        <member name="M:Light.Data.LEnumerable`1.Range(System.Int32,System.Int32)">
            <summary>
            取数据的范围
            </summary>
            <param name="from">开始序号</param>
            <param name="to">结束序号</param>
            <returns> 枚举查询器</returns>
        </member>
        <member name="M:Light.Data.LEnumerable`1.PageSize(System.Int32,System.Int32)">
            <summary>
            分页取数据范围
            </summary>
            <param name="page">页数</param>
            <param name="size">每页数量</param>
            <returns> 枚举查询器</returns>
        </member>
        <member name="M:Light.Data.LEnumerable`1.SafeMode(Light.Data.SafeLevel)">
            <summary>
            安全模式
            </summary>
            <param name="level">数据锁类型</param>
            <returns> 枚举查询器</returns>
        </member>
        <member name="M:Light.Data.LEnumerable`1.CountField(Light.Data.BasicFieldInfo)">
            <summary>
            聚合统计改字段的数量
            </summary>
            <param name="field">统计字段</param>
            <returns>结果</returns>
        </member>
        <member name="M:Light.Data.LEnumerable`1.CountField(Light.Data.BasicFieldInfo,System.Boolean)">
            <summary>
            聚合统计改字段的数量
            </summary>
            <param name="field">统计字段</param>
            <param name="isDistinct">是否去重</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.LEnumerable`1.Max(Light.Data.BasicFieldInfo)">
            <summary>
            聚合统计该字段的最大值
            </summary>
            <param name="field">统计字段</param>
            <returns>结果</returns>
        </member>
        <member name="M:Light.Data.LEnumerable`1.Max(Light.Data.BasicFieldInfo,System.Boolean)">
            <summary>
            聚合统计该字段的最大值
            </summary>
            <param name="field">统计字段</param>
            <param name="isDistinct">是否去重</param>
            <returns>结果</returns>
        </member>
        <member name="M:Light.Data.LEnumerable`1.Min(Light.Data.BasicFieldInfo)">
            <summary>
            聚合统计该字段的最小值
            </summary>
            <param name="field">统计字段</param>
            <returns>结果</returns>
        </member>
        <member name="M:Light.Data.LEnumerable`1.Min(Light.Data.BasicFieldInfo,System.Boolean)">
            <summary>
            聚合统计该字段的最小值
            </summary>
            <param name="field">统计字段</param>
            <param name="isDistinct">是否去重</param>
            <returns>结果</returns>
        </member>
        <member name="M:Light.Data.LEnumerable`1.Avg(Light.Data.BasicFieldInfo)">
            <summary>
            聚合统计该字段的平均值
            </summary>
            <param name="field">统计字段</param>
            <returns>结果</returns>
        </member>
        <member name="M:Light.Data.LEnumerable`1.Avg(Light.Data.BasicFieldInfo,System.Boolean)">
            <summary>
            聚合统计该字段的平均值
            </summary>
            <param name="field">统计字段</param>
            <param name="isDistinct">是否去重</param>
            <returns>结果</returns>
        </member>
        <member name="M:Light.Data.LEnumerable`1.Sum(Light.Data.BasicFieldInfo)">
            <summary>
            聚合统计该字段的总和
            </summary>
            <param name="field">统计字段</param>
            <returns>结果</returns>
        </member>
        <member name="M:Light.Data.LEnumerable`1.Sum(Light.Data.BasicFieldInfo,System.Boolean)">
            <summary>
            聚合统计该字段的总和
            </summary>
            <param name="field">统计字段</param>
            <param name="isDistinct">是否去重</param>
            <returns>结果</returns>
        </member>
        <member name="M:Light.Data.LEnumerable`1.Single">
            <summary>
            获取首条记录
            </summary>
            <returns>数据对象</returns>
        </member>
        <member name="M:Light.Data.LEnumerable`1.ElementAt(System.Int32)">
            <summary>
            获取索引的某条记录
            </summary>
            <param name="index">索引值</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.LEnumerable`1.DeleteMass">
            <summary>
            批量删除
            </summary>
            <returns>受影响数据</returns>
        </member>
        <member name="M:Light.Data.LEnumerable`1.UpdateMass(Light.Data.UpdateSetValue[])">
            <summary>
            批量更新
            </summary>
            <param name="updates">更新字段值数组,类型必须和更新对象一致</param>
            <returns>受影响数据</returns>
        </member>
        <member name="M:Light.Data.LEnumerable`1.QuerySingleField(Light.Data.DataFieldInfo)">
            <summary>
            查询单列字段的数据
            </summary>
            <param name="fieldInfo">字段</param>
            <returns>数据枚举</returns>
        </member>
        <member name="M:Light.Data.LEnumerable`1.QuerySingleField(Light.Data.DataFieldInfo,System.Boolean)">
            <summary>
            查询单列字段的数据
            </summary>
            <param name="fieldInfo">字段</param>
            <param name="isDistinct">是否去重</param>
            <returns>数据枚举</returns>
        </member>
        <member name="M:Light.Data.LEnumerable`1.QuerySingleFieldList(Light.Data.DataFieldInfo)">
            <summary>
            查询单列字段的数据
            </summary>
            <param name="fieldInfo">字段</param>
            <returns>数据枚举</returns>
        </member>
        <member name="M:Light.Data.LEnumerable`1.QuerySingleField``1(Light.Data.DataFieldInfo,System.Boolean,System.Boolean)">
            <summary>
            查询单列字段的数据
            </summary>
            <typeparam name="K">输出字段类型,必须为原始数据类型</typeparam>
            <param name="fieldInfo">字段</param>
            <param name="isNullable">是否可空</param>
            <param name="isDistinct">是否去重</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.LEnumerable`1.QuerySingleFieldList(Light.Data.DataFieldInfo,System.Boolean)">
            <summary>
            查询单列字段的数据
            </summary>
            <param name="fieldInfo">字段</param>
            <param name="isDistinct">是否去重</param>
            <returns>数据集合</returns>
        </member>
        <member name="M:Light.Data.LEnumerable`1.QuerySingleFieldList``1(Light.Data.DataFieldInfo,System.Boolean,System.Boolean)">
            <summary>
            查询单列字段的数据
            </summary>
            <typeparam name="K">输出字段类型,必须为原始数据类型</typeparam>
            <param name="fieldInfo">字段</param>
            <param name="isNullable">是否可空</param>
            <param name="isDistinct">是否去重</param>
            <returns>数据集合</returns>
        </member>
        <member name="M:Light.Data.LEnumerable`1.ToList">
            <summary>
            转换为集合
            </summary>
            <returns>泛型集合</returns>
        </member>
        <member name="M:Light.Data.LEnumerable`1.ToArray">
            <summary>
            转换为数组
            </summary>
            <returns>泛型数组</returns>
        </member>
        <member name="M:Light.Data.LEnumerable`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Light.Data.LEnumerable`1.GetDbCommand">
            <summary>
            生成命令
            </summary>
            <returns>命令接口</returns>
        </member>
        <member name="P:Light.Data.LEnumerable`1.Count">
            <summary>
            数据集数量
            </summary>
        </member>
        <member name="P:Light.Data.LEnumerable`1.LongCount">
            <summary>
            长整形数据集数量
            </summary>
        </member>
        <member name="P:Light.Data.LEnumerable`1.Exists">
            <summary>
            是否存在
            </summary>
        </member>
        <member name="M:Light.Data.Mappings.DataMapping.GetTableMapping(System.Type)">
            <summary>
            获取数据表映射图
            </summary>
            <param name="type">映射类型</param>
            <returns>数据表映射图</returns>
        </member>
        <member name="M:Light.Data.Mappings.DataMapping.GetEntityMapping(System.Type)">
            <summary>
            获取关系映射图
            </summary>
            <param name="type">映射类型</param>
            <returns>关系映射图</returns>
        </member>
        <member name="M:Light.Data.Mappings.DataMapping.CreateMapping(System.Type)">
            <summary>
            创建关系映射图
            </summary>
            <param name="type">映射类型</param>
            <returns>关系映射图</returns>
        </member>
        <member name="M:Light.Data.Mappings.DataMapping.GetFieldNames">
            <summary>
            获取字段名数组
            </summary>
            <returns></returns>
        </member>
        <member name="P:Light.Data.Mappings.DataMapping.ObjectType">
            <summary>
            映射数据类型
            </summary>
        </member>
        <member name="P:Light.Data.Mappings.DataMapping.ExtentParams">
            <summary>
            扩展参数集合
            </summary>
        </member>
        <member name="T:Light.Data.Mappings.RelationFieldMapping">
            <summary>
            关联映射表
            </summary>
        </member>
        <member name="F:Light.Data.Mappings.RelationFieldMapping._synobj1">
            <summary>
            线程同步1
            </summary>
        </member>
        <member name="F:Light.Data.Mappings.RelationFieldMapping._synobj2">
            <summary>
            线程同步2
            </summary>
        </member>
        <member name="F:Light.Data.Mappings.RelationFieldMapping._relationTableType">
            <summary>
            关联类型
            </summary>
        </member>
        <member name="F:Light.Data.Mappings.RelationFieldMapping._relationKeys">
            <summary>
            关联键值对应字典
            </summary>
        </member>
        <member name="F:Light.Data.Mappings.RelationFieldMapping._relationKeyValues">
            <summary>
            关联键值数组
            </summary>
        </member>
        <member name="F:Light.Data.Mappings.RelationFieldMapping._relationKind">
            <summary>
            关联方式
            </summary>
        </member>
        <member name="F:Light.Data.Mappings.RelationFieldMapping._resultDataKind">
            <summary>
            关联数据类型
            </summary>
        </member>
        <member name="F:Light.Data.Mappings.RelationFieldMapping._relationName">
            <summary>
            关联关系名称
            </summary>
        </member>
        <member name="F:Light.Data.Mappings.RelationFieldMapping._masterTableMapping">
            <summary>
            主表映射
            </summary>
        </member>
        <member name="F:Light.Data.Mappings.RelationFieldMapping._relateTableMapping">
            <summary>
            关联表映射
            </summary>
        </member>
        <member name="F:Light.Data.Mappings.RelationFieldMapping._hasLoadRelateRelationMapping">
            <summary>
            是否已经Load关联表的关联映射
            </summary>
        </member>
        <member name="F:Light.Data.Mappings.RelationFieldMapping._relateRelationMapping">
            <summary>
            关联表的关联映射
            </summary>
        </member>
        <member name="M:Light.Data.Mappings.RelationFieldMapping.#ctor(Light.Data.Mappings.DataEntityMapping,System.Type,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="masterTableMapping">主关联表的映射</param>
            <param name="relateTableType">关联类型</param>
            <param name="relationName">关联名</param>
        </member>
        <member name="M:Light.Data.Mappings.RelationFieldMapping.AddRelationKeys(System.String,System.String)">
            <summary>
            添加关联键值对应关系
            </summary>
            <param name="masterKey"></param>
            <param name="relationKey"></param>
        </member>
        <member name="P:Light.Data.Mappings.RelationFieldMapping.Kind">
            <summary>
            关联方式
            </summary>
        </member>
        <member name="P:Light.Data.Mappings.RelationFieldMapping.ResultDataKind">
            <summary>
            关联数据类型
            </summary>
        </member>
        <member name="P:Light.Data.Mappings.RelationFieldMapping.RelationName">
            <summary>
            关联名称
            </summary>
        </member>
        <member name="P:Light.Data.Mappings.RelationFieldMapping.MasterTableMapping">
            <summary>
            主映射表
            </summary>
        </member>
        <member name="P:Light.Data.Mappings.RelationFieldMapping.RelateTableMapping">
            <summary>
            关联映射表
            </summary>
        </member>
        <member name="P:Light.Data.Mappings.RelationFieldMapping.RelateRelationMapping">
            <summary>
            关联表的关联映射
            </summary>
        </member>
        <member name="T:Light.Data.Mappings.RelationFieldMapping.RelationKind">
            <summary>
            关联方式
            </summary>
        </member>
        <member name="F:Light.Data.Mappings.RelationFieldMapping.RelationKind.OneToOne">
            <summary>
            一对一关联
            </summary>
        </member>
        <member name="F:Light.Data.Mappings.RelationFieldMapping.RelationKind.OneToMany">
            <summary>
            一对多关联
            </summary>
        </member>
        <member name="T:Light.Data.Mappings.RelationFieldMapping.DataKind">
            <summary>
            关联数据类型
            </summary>
        </member>
        <member name="F:Light.Data.Mappings.RelationFieldMapping.DataKind.SingleObject">
            <summary>
            单对象
            </summary>
        </member>
        <member name="F:Light.Data.Mappings.RelationFieldMapping.DataKind.Array">
            <summary>
            数组
            </summary>
        </member>
        <member name="F:Light.Data.Mappings.RelationFieldMapping.DataKind.IList">
            <summary>
            集合
            </summary>
        </member>
        <member name="T:Light.Data.RE">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Light.Data.RE.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Light.Data.RE.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Light.Data.RE.AggregateFunctionFieldIsExists">
            <summary>
              查找类似 聚合函数字段{0}已存在 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.AggregateTypeIsNotSpecifyType">
            <summary>
              查找类似 汇总类型非指定的类型{0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.AggregationFieldIsInvaild">
            <summary>
              查找类似 统计字段类型不合法 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.AggregationFieldsIsNotExists">
            <summary>
              查找类似 统计映射表中没有统计字段 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.AggregationMappingCanNotSelectSingle">
            <summary>
              查找类似 统计映射不能进行单列查询操作 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.AggregationMappingRelateError">
            <summary>
              查找类似 统计表关联错误 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.AggregationResultIsNull">
            <summary>
              查找类似 统计结果为空 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.ComplexFieldHaveNotSubFields">
            <summary>
              查找类似 复合字段没有子字段 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.ConfigDataFieldIsNotExists">
            <summary>
              查找类似 &quot;{0}&quot;的数据字段&quot;{1}&quot;不存在 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.ConfigDataFieldNameIsEmpty">
            <summary>
              查找类似 &quot;{0}&quot;的数据字段名为空值 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.ConfigDataLoadError">
            <summary>
              查找类似 配置数据读取出错,数据节点并非&quot;{0}&quot; 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.ConfigDataTypeValueIsEmpty">
            <summary>
              查找类似 配置数据类型{0}的值为空 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.ConnectionSettingIsNotExists">
            <summary>
              查找类似 数据库连接配置不存在 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.ConnectionSettingNameIsNotExists">
            <summary>
              查找类似 数据库连接配置名&quot;{0}&quot;不存在 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.DataBaseNotSupportInnerPage">
            <summary>
              查找类似 该数据库不支持内分页 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.DataContextIsNotExists">
            <summary>
              查找类似 数据连接上下文不存在 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.DataFieldsIsNotExists">
            <summary>
              查找类似 数据映射表中没设定数据字段 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.DataMappingIsNotMatchAggregateField">
            <summary>
              查找类似 数据表与统计字段不匹配 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.DataMappingIsNotMatchAggregationExpression">
            <summary>
              查找类似 指定的查询表与统计表达式不匹配 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.DataMappingIsNotMatchOrderExpression">
            <summary>
              查找类似 指定的查询表与排序表达式不匹配 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.DataMappingIsNotMatchQueryExpression">
            <summary>
              查找类似 指定的查询表与查询表达式不匹配 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.DataMappingOfExpressionIsNotMatch">
            <summary>
              查找类似 表达式的查询表不一致 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.DataTableNotAllowMoreIdentityField">
            <summary>
              查找类似 数据表不允许多少自增字段 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.DataTableNotIdentityField">
            <summary>
              查找类似 数据表没有指定自增ID 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.DataValueIsNotAllowEmply">
            <summary>
              查找类似 {0}的值不能为空值 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.DynamicAggregateFieldIsNotExists">
            <summary>
              查找类似 动态汇总字段不存在 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.EnumerableLengthNotAllowIsZero">
            <summary>
              查找类似 数据枚举值不允许为0 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.FieldIsNotMatchDataMapping">
            <summary>
              查找类似 字段数据映射类型不匹配 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.FieldMappingIsNotExists">
            <summary>
              查找类似 映射字段{0}不存在 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.FieldNameIsInvalid">
            <summary>
              查找类似 字段名称&quot;{0}&quot;不合法 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.GroupNameFieldIsExists">
            <summary>
              查找类似 分组字段名{0}已存在 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.InputValueIsNotAllowNull">
            <summary>
              查找类似 输入值不允许为空值 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.LoadDataTableConfigFaild">
            <summary>
              查找类似 加载数据表配置失败 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.NotDefineDataMappingAttribute">
            <summary>
              查找类似 无定义数据映射特性 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.NotExistsAggregateField">
            <summary>
              查找类似 不在汇总字段中 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.OnlyPrimitiveFieldCanSelectSingle">
            <summary>
              查找类似 非原始字段不能使用单列查询 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.PrimaryKeyIsNotExist">
            <summary>
              查找类似 主键字段不存在 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.RandomOrderFieldIsNotExists">
            <summary>
              查找类似 随机排序字段不存在 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.RandomOrderForbitCatch">
            <summary>
              查找类似 随机排序不允许做排序组合 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.RegionSizeInvaild">
            <summary>
              查找类似 取值范围数量值不合法 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.RegionStartInvaild">
            <summary>
              查找类似 取值范围开始值不合法 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.RelationKeyIsNotPrimitiveField">
            <summary>
              查找类似 关联键值{0}并非原始数据字段 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.RelationMappingIsNotExists">
            <summary>
              查找类似 关联映射{0}不存在 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.RelationMasterKeyIsExists">
            <summary>
              查找类似 关联映射主键已存在 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.SingleFieldSelectTypeError">
            <summary>
              查找类似 单列查询类型错误 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.TheDataMappingIsNotAggregationMapping">
            <summary>
              查找类似 指定的类型并非统计表类型 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.TheDataMappingIsNotDataEntityMapping">
            <summary>
              查找类似 指定的类型并非实体表类型 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.TheDataMappingIsNotDataTableMapping">
            <summary>
              查找类似 指定的类型并非数据表类型 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.TheDataMappingNotAllowDeleteMass">
            <summary>
              查找类似 指定表并非数据表,不能批量删除 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.TheNumberOfPrimaryKeysIsNotMatch">
            <summary>
              查找类似 主键数目不匹配 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.TheRelationTypeNotIList">
            <summary>
              查找类似 关联类的集合类型非IList&lt;T&gt; 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.TheTypeOfAggregationFieldIsNotRight">
            <summary>
              查找类似 统计汇总字段类型不正确 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.TheTypeOfDataFieldIsNotRight">
            <summary>
              查找类似 字段类型不正确 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.TheTypeOfIdentityFieldError">
            <summary>
              查找类似 表的自增字段类型必须为Int32和Int64 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.TypeInheritError">
            <summary>
              查找类似 数据类型{0}继承错误 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.TypeIsNotDatabase">
            <summary>
              查找类似 类型{0}并非数据库类型 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.TypeNotInheritFromSpecialType">
            <summary>
              查找类似 数据类型{0}继承错误,并非继承自{1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.TypeUnsupportTheTransform">
            <summary>
              查找类似 该类型字段不支持{0}转换 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.TypfOfDataFieldIsNotString">
            <summary>
              查找类似 字段{0}非字符类型 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.UnknowOrderType">
            <summary>
              查找类似 未知的排序格式 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.UnsupportDateFormat">
            <summary>
              查找类似 不支持日期格式{0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.UnSupportPredicate">
            <summary>
              查找类似 不支持谓词{0}的查询 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.UpdateFieldIsNotExists">
            <summary>
              查找类似 更新字段不存在 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.UpdateFieldTypeIsError">
            <summary>
              查找类似 更新字段类型出错, 的本地化字符串。
            </summary>
        </member>
        <member name="P:Light.Data.RE.ValueNotInEnumType">
            <summary>
              查找类似 数值&quot;{0}&quot;不存在与枚举集合{1}中 的本地化字符串。
            </summary>
        </member>
        <member name="T:Light.Data.Region">
            <summary>
            取值范围对象
            </summary>
        </member>
        <member name="M:Light.Data.Region.#ctor(System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="start">开始索引,从0开始</param>
            <param name="size">取值数量</param>
        </member>
        <member name="M:Light.Data.Region.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Light.Data.Region.Start">
            <summary>
            获取开始索引
            </summary>
        </member>
        <member name="P:Light.Data.Region.Size">
            <summary>
            获取取值数量
            </summary>
        </member>
        <member name="T:Light.Data.LightDataException">
            <summary>
            LightData异常
            </summary>
        </member>
        <member name="M:Light.Data.LightDataException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message">异常信息</param>
        </member>
        <member name="M:Light.Data.LightDataException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message">异常信息</param>
            <param name="innerException">子异常</param>
        </member>
        <member name="T:Light.Data.SqlExecutor">
            <summary>
            SQL语句执行器,直接执行SQL语句
            </summary>
        </member>
        <member name="F:Light.Data.SqlExecutor._command">
            <summary>
            数据库命令
            </summary>
        </member>
        <member name="F:Light.Data.SqlExecutor._context">
            <summary>
            数据库上下文
            </summary>
        </member>
        <member name="F:Light.Data.SqlExecutor._level">
            <summary>
            安全级别
            </summary>
        </member>
        <member name="M:Light.Data.SqlExecutor.#ctor(System.String,Light.Data.DataParameter[],System.Data.CommandType,Light.Data.SafeLevel,Light.Data.DataContext)">
            <summary>
            构造函数
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">参数</param>
            <param name="commandType">命令类型</param>
            <param name="level">安全级别</param>
            <param name="context">数据库上下文</param>
        </member>
        <member name="M:Light.Data.SqlExecutor.#ctor(System.Data.IDbCommand,Light.Data.DataContext)">
            <summary>
            构造函数
            </summary>
            <param name="command">数据库命令</param>
            <param name="context">数据库上下文</param>
        </member>
        <member name="M:Light.Data.SqlExecutor.ExecuteNonQuery">
            <summary>
            执行语句
            </summary>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:Light.Data.SqlExecutor.ExecuteScalar">
            <summary>
            执行语句并返回结果
            </summary>
            <returns>返回结果</returns>
        </member>
        <member name="M:Light.Data.SqlExecutor.QueryDataSet">
            <summary>
            查询DataSet数据集
            </summary>
            <returns>DataSet数据集</returns>
        </member>
        <member name="M:Light.Data.SqlExecutor.QueryDataTable(Light.Data.Region)">
            <summary>
            查询DataTable数据集
            </summary>
            <param name="region">查询范围</param>
            <returns>DataSet数据集</returns>
        </member>
        <member name="M:Light.Data.SqlExecutor.QueryDataTable">
            <summary>
            查询DataTable数据集
            </summary>
            <returns>DataSet数据集</returns>
        </member>
        <member name="M:Light.Data.SqlExecutor.QueryList``1(Light.Data.Region)">
            <summary>
            查询并返回指定类型的数据集合
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="region">查询范围</param>
            <returns>数据集合</returns>
        </member>
        <member name="M:Light.Data.SqlExecutor.QueryList``1">
            <summary>
            查询并返回所有指定类型的数据集合
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <returns>数据集合</returns>
        </member>
        <member name="M:Light.Data.SqlExecutor.LQuery``1(Light.Data.Region)">
            <summary>
            查询并返回指定类型的枚举数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="region">查询范围</param>
            <returns>枚举数据</returns>
        </member>
        <member name="M:Light.Data.SqlExecutor.LQuery``1">
            <summary>
            查询并返回指定类型的枚举数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <returns>枚举数据</returns>
        </member>
        <member name="P:Light.Data.SqlExecutor.CommandTimeOut">
            <summary>
            设置命令超时
            </summary>
        </member>
        <member name="T:Light.Data.DataTableEntity">
            <summary>
            表数据实体
            </summary>
        </member>
        <member name="F:Light.Data.DataTableEntity._hasLoadData">
            <summary>
            是否已经读取数据
            </summary>
        </member>
        <member name="M:Light.Data.DataTableEntity.Save">
            <summary>
            保存数据
            </summary>
        </member>
        <member name="M:Light.Data.DataTableEntity.Erase">
            <summary>
            删除数据
            </summary>
        </member>
        <member name="F:Light.Data.DataTableEntity._updateFields">
            <summary>
            被更新的数据字段
            </summary>
        </member>
        <member name="M:Light.Data.DataTableEntity.UpdateDataNotify(System.String)">
            <summary>
            更新字段
            </summary>
            <param name="fieldName">字段名字</param>
        </member>
        <member name="M:Light.Data.DataTableEntity.LoadDataComplete">
            <summary>
            读取数据完成
            </summary>
        </member>
        <member name="M:Light.Data.TransactionConnection.Finalize">
            <summary>
            供GC调用的析构函数
            </summary>
        </member>
        <member name="T:Light.Data.TransDataContext">
            <summary>
            进行事务的数据上下文
            </summary>
        </member>
        <member name="M:Light.Data.TransDataContext.BeginTrans(Light.Data.SafeLevel)">
            <summary>
            开始事务
            </summary>
        </member>
        <member name="M:Light.Data.TransDataContext.CommitTrans">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:Light.Data.TransDataContext.RollbackTrans">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:Light.Data.TransDataContext.Dispose">
            <summary>
            对象注销
            </summary>
        </member>
        <member name="M:Light.Data.TransDataContext.Dispose(System.Boolean)">
            <summary>
            protected的Dispose方法，保证不会被外部调用。
            </summary>
            <param name="disposing">传入bool值disposing以确定是否释放托管资源</param>
        </member>
        <member name="M:Light.Data.TransDataContext.Finalize">
            <summary>
            供GC调用的析构函数
            </summary>
        </member>
        <member name="T:Light.Data.UpdateSetValue">
            <summary>
            批量更新设置值
            </summary>
        </member>
        <member name="M:Light.Data.UpdateSetValue.#ctor(Light.Data.DataFieldInfo,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="dataField">要更新的数据字段</param>
            <param name="value">更新值</param>
        </member>
        <member name="P:Light.Data.UpdateSetValue.DataField">
            <summary>
            数据字段
            </summary>
        </member>
        <member name="P:Light.Data.UpdateSetValue.Value">
            <summary>
            数据值
            </summary>
        </member>
    </members>
</doc>
